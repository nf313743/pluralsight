2.1
There are 2 types of forms in angular: template-driven and reactive.
template uses 2 way data binding
reative uses immutable data model
	logic is in code rather than html template
	which makes easier to unit test
	and change the things dynamically
	
3.1
FormControl tracks the state on an individual control like inout box
FormGroup tracks group of controls
FormModel data structure that represents the html form.  Reflects the form and input elements in the html template
	retains form state and values

3.2
Using <form> automatically binds to ngForm (using Template-driven)
For Reactive uses RecativeFormsModule

3.4
Reactive form model is in component class
No need for name attribute or ngModel
Validation done in class so no attributes in the html

4.1
Reavtives forms you create your own FormGroup and FormControls in the component class 
	Instantiate in OnInit
	
4.5
To bind to FormGroup in the component: <form [formGroup]="customerForm">
	This will tell Angular not to build its own form model but to use the one defined in the component
	
5
Use nested FormGroup to apply validation across multiple contorls

6.2
You can watch a control change event using:
	this.myControl.valueChanges.subscribe(value => console.log(value)) -- Subscribe to the observable
	
6.4
debounceTime - ignores events until a specific times has passed without another event
	Usefule for validation messages not displaying straight away when a user enters a value in an input
	
7.6
FormArray are used to hold a number of FormControls and/or FormGroups in an array.  These can then be accessed via an index.  And also expanded/reduced dynamically.